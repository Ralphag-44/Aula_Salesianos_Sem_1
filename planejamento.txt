		Advinhar número:

Fazer o bagulho de advinhar falado

mostar o console e "brincar de hacker"

Mostrar tipagem 

Variaveis prompt alert
numero_inteiro = Number(prompt());
numero_real = Number(prompt());
texto = prompt();

Expressões (+,-,*,/,%, ==, >, <, <=, >=, !=, &&, ||)

se um número é positivo ou negativo
se um número é par ou impar
se um número está dentro de um intervalo

Maths
abs, ceil, floor, trunc, sqrt, pow, random, 

mostrar as raizes de uma equação de segundo grau (importante por causa da parentisação)
(x-2)*(x-5)=x^2 -5x -2x +10 = x^2 -7x + 10 = 0
distância entre dois pontos

If 
se uma divisão é inteira ou tem resto
mostrar se uma equação de segundo grau tem 0, 1 ou 2 raizes reais
ordenar o conteúdo de 3 variáveis a,b,c

repetição (so while, inicialização, teste e atualização)
loop infinito, i = 0; while i < 10; alert(i);


1ª: escolher número aleatório
2ª: o jogo com so o primeiro if
3ª: fazer o jogo so com ifs
4ª: jogo final

		
		
		basquete										

1ª: HTML, canvas, id e DOMfire
	desafio: trocar cor da bola em hexa, fazer uma bola um quadrado e um triângulo (os 3 tem que aparecer).
	
2ª: interval e atualização do canvas e bola caindo sem aceleração infinitamente
	desafios: loop sem limpar background arrumar, fazer cair mais rápido, fazer parar quando bater no fundo da tela

3ª: simulação de física (movimento)
bola_aceleracao_x = 0, bola_aceleracao_y = 2, bola_velocidade_x = bola_velocidade_x + bola_aceleracao_x, bola_velocidade_y = bola_velocidade_y + 
bola_aceleracao_y, bola_centro_x = bola_centro_x + bola_velocidade_x, bola_centro_y = bola_centro_y + bola_velocidade_y

explicar quando velocidade x é negativa, quando x é positiva, quando y é positiva e quando y é negativa.

4: simulação de física (colisão)
colisão com as paredes verticais, velocidade x *= -1
colisão com as paredes horizontais, velocidade y *= -1

	desafios: adicionar coeficiente de restituição (velocidade ? *= 0.8).

5ª: colisão com aro
sempre que bater no aro, subir a bola
fazer a colisão com um "retangulozinho" se o centro da bola estiver dentro 
	desafios: aumentar e diminuir tamanho do aro, rastro da bola, 
	desafio CARALHÃO: escolher distância da tabela e marcar mais pontos quanto mais longe 
	
6ª: jogo completo (com distância aleatória (2, 3 e 5 pontos))

		
		
		Space Invaders
		
1ª: imagens no canvas (nave)
	desafios: trocar a nave
	
2ª: movimentação
usar event.key por ser mais legível (e não ter o trabalho de explicar o keyCode).
	desafios: mover no y.

3ª: limitação de tela x
if(nave_x > 0) {...} else {if(nave_x < canvas.width)}
	desafios: ajeitar x+width, colisão y

4ª: desenhar inimigo na tela
	desafios: fazer inimigo se movendo, desenhar inimigo maior, desenhar inimigo menor

5ª: inimigo andando na tela
inimigo1_x = inimigo1_x + inimigo1_velocidade_x
	desafios: quicar na tela.
	
6ª: inimigo quicando na tela
if(inimigo1_x > 0 || inimigo1_x < canvas.width) 
{	inimigo1_velocidade_x = inimigo1_velocidade_x * -1; 
}
	
7ª: tiro do player
tiro que so pode ser reatirado quando estiver fora da tela no y, so alterando a posição dele.
	desafios: tiro com física, fazer tiro aumentar de tamanho com o tempo.
	
8ª: vários inimigos.
explicar que com inimigos_velocidade quando eles baterem na parede so precisa inverter a velocidade 1 vez 
	desafios: descer os inimigos quando baterem na parede.

9ª: Inimigos morrendo
colisao de distância entre dois pontos

10ª: tiro dos inimigos.
Math.random com ifs que dependendo do número do Math.random vai sair de um inimigo diferente
	desafios: excluir tiros que colidirem.
	
11ª: vida e colisão
adicionar sistema de vida e colisão para o player 

12ª: hud
	desafios: ganhar pontos por segundo
	
13ª: animação
ficar alterando imagens
	desafios: aumentar a velocidade da animação

14ª: PowerUp
vida++, velocidade_nave ++, velocidade_tiro ++
	desafios: fazer powerDown

jogo final: com som



Lembrete:
colocar comentários em bloco de código exemplo:

	// criação da nave com suas características
	nave = new Image();
	nave.src = "imgs/nave.png"; // caminho da imagem a partir desse mesmo arquivo
	nave_x = 100;
	nave_y = canvas.height-150;
	nave_largura = 100;
	nave_altura = 100;
	
antes da penultima aula, mostrar w3schools pra eles poderem consultar.
